#include <GL/glut.h>
#include <stdio.h>

static GLfloat view_rotx = 0.0, view_roty = 0.0, view_rotz = 0.0;
static double s = 10;
static double b = 2.66666;
static double r = 28;

double x = 0.1;
double y = 0.1;
double z = 0.1;

void displayMe(void)
{
  glClearColor(1,1,1,1);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    //starting to draw the square
    glLoadIdentity();
    double dt = 0.01;
    glRotatef(view_rotx, 1.0, 0.0, 0.0);
    glRotatef(view_roty, 0.0, 1.0, 0.0);
    glRotatef(view_rotz, 0.0, 0.0, 1.0);

    glColor3f(1,0,0);
    glPointSize(6.0);
    glBegin(GL_POINTS);

    glVertex3d(x,y,z);
    glVertex3d(x+0.01, y+0.01, z+0.01);

    glEnd();
    //lorenz

    /*
    int i;
    for(i =0; i< 20000; i++)
      {
	float dx = s*(y-x);
	float dy = x*(r-z)-y;
	float dz = x*y - b*z;
	x += dt*dx;
	y += dt*dy;
	z += dt*dz;

	glVertex3d(x,y,z);
      }
    
      glEnd();
   
      //printf(" %f %f %f \n", x, y, z);      
    glColor3f(1.0,1.0,1.0);
    glBegin(GL_LINES);
    glVertex3d(0,0,0);
    glVertex3d(1,0,0);
    glVertex3d(0,0,0);
    glVertex3d(0,1,0);
    glVertex3d(0,0,0);
    glVertex3d(0,0,1);
    glEnd();
    */
    
    glFlush();
    glutSwapBuffers();

}

static void special(int k, int x, int y) {
	switch (k) {
		case GLUT_KEY_UP:
			view_rotx += 5.0;
			break;
		case GLUT_KEY_DOWN:
			view_rotx -= 5.0;
			break;
		case GLUT_KEY_LEFT:
			view_roty -= 5.0;
			break;
		case GLUT_KEY_RIGHT:
			view_roty += 5.0;
			break;
		default:
			return;
	}
  glutPostRedisplay();
}

static void idle(void)
{
  glutPostRedisplay();
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowSize(300, 300);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Lorenz Attractor");
    glutDisplayFunc(displayMe);
    glutSpecialFunc(special);
    //glutIdleFunc(idle);
    glutMainLoop();
    return 0;
}
